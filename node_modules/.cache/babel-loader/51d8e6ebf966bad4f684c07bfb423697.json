{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { FormContext } from './FormContext';\n/**\n * Represents the KendoReact FormElement component.\n * It's small wrapper around HTML form element which automatically attach the\n * Form component's `onSubmit` render prop and Kendo CSS classes.\n * Other props are passed to the DOM node.\n */\n\nexport var FormElement = function (props) {\n  var form = React.useContext(FormContext);\n\n  var className = props.className,\n      onSubmit = props.onSubmit,\n      style = props.style,\n      horizontal = props.horizontal,\n      others = __rest(props, [\"className\", \"onSubmit\", \"style\", \"horizontal\"]);\n\n  var formClassName = classNames({\n    'k-form': true,\n    'k-form-horizontal': horizontal === true\n  }, className);\n  return React.createElement(\"form\", __assign({}, others, {\n    style: props.style,\n    className: formClassName,\n    onSubmit: form ? form.onSubmit : undefined\n  }), props.children);\n};\nFormElement.displayName = 'KendoReactFormElement';","map":{"version":3,"sources":["../../src/FormElement.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,UAAT,QAA2B,8BAA3B;AACA,SAAS,WAAT,QAA6C,eAA7C;AA4BA;;;;;;;AAMA,OAAO,IAAM,WAAW,GAA8C,UAAC,KAAD,EAAwB;AAC1F,MAAM,IAAI,GAA2B,KAAK,CAAC,UAAN,CAAiB,WAAjB,CAArC;;AACQ,MAAA,SAAA,GAAA,KAAA,CAAA,SAAA;AAAA,MAAW,QAAA,GAAA,KAAA,CAAA,QAAX;AAAA,MAAqB,KAAA,GAAA,KAAA,CAAA,KAArB;AAAA,MAA4B,UAAA,GAAA,KAAA,CAAA,UAA5B;AAAA,MAAwC,MAAA,GAAA,MAAA,CAAA,KAAA,EAAA,CAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,YAAA,CAAA,CAAxC;;AAER,MAAM,aAAa,GAAG,UAAU,CAC5B;AACI,cAAU,IADd;AAEI,yBAAqB,UAAU,KAAK;AAFxC,GAD4B,EAK5B,SAL4B,CAAhC;AAQA,SACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EACQ,MADR,EACc;AACV,IAAA,KAAK,EAAE,KAAK,CAAC,KADH;AAEV,IAAA,SAAS,EAAE,aAFD;AAGV,IAAA,QAAQ,EAAE,IAAI,GAAG,IAAI,CAAC,QAAR,GAAmB;AAHvB,GADd,CAAA,EAMK,KAAK,CAAC,QANX,CADJ;AAUH,CAtBM;AAwBP,WAAW,CAAC,WAAZ,GAA0B,uBAA1B","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { FormContext } from './FormContext';\n/**\n * Represents the KendoReact FormElement component.\n * It's small wrapper around HTML form element which automatically attach the\n * Form component's `onSubmit` render prop and Kendo CSS classes.\n * Other props are passed to the DOM node.\n */\nexport var FormElement = function (props) {\n    var form = React.useContext(FormContext);\n    var className = props.className, onSubmit = props.onSubmit, style = props.style, horizontal = props.horizontal, others = __rest(props, [\"className\", \"onSubmit\", \"style\", \"horizontal\"]);\n    var formClassName = classNames({\n        'k-form': true,\n        'k-form-horizontal': horizontal === true\n    }, className);\n    return (React.createElement(\"form\", __assign({}, others, { style: props.style, className: formClassName, onSubmit: form ? form.onSubmit : undefined }), props.children));\n};\nFormElement.displayName = 'KendoReactFormElement';\n//# sourceMappingURL=FormElement.js.map"]},"metadata":{},"sourceType":"module"}