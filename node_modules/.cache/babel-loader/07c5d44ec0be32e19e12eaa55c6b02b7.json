{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { FormContext } from './FormContext';\n/**\n * Represents the FieldArray component that is used inside the KendoReact Form component.\n * It provides methods via render props for common array manipulations.\n */\n\nexport var FieldArray = function FieldArray(props) {\n  var name = props.name,\n      component = props.component,\n      validator = props.validator,\n      type = props.type,\n      children = props.children,\n      others = __rest(props, [\"name\", \"component\", \"validator\", \"type\", \"children\"]);\n\n  var form = React.useContext(FormContext);\n  var formId = form ? form.id : '';\n  React.useEffect(function () {\n    if (!form) {\n      return;\n    }\n\n    var unregisterField = form.registerField(name, validator);\n    return unregisterField;\n  }, [name, formId, validator]);\n  var onUnshift = React.useCallback(function (event) {\n    return form.onUnshift(name, event);\n  }, [name, formId]);\n  var onPush = React.useCallback(function (event) {\n    return form.onPush(name, event);\n  }, [name, formId]);\n  var onInsert = React.useCallback(function (event) {\n    return form.onInsert(name, event);\n  }, [name, formId]);\n  var onPop = React.useCallback(function () {\n    return form.onPop(name);\n  }, [name, formId]);\n  var onRemove = React.useCallback(function (event) {\n    return form.onRemove(name, event);\n  }, [name, formId]);\n  var onReplace = React.useCallback(function (event) {\n    return form.onReplace(name, event);\n  }, [name, formId]);\n  var onMove = React.useCallback(function (event) {\n    return form.onMove(name, event);\n  }, [name, formId]);\n\n  if (!form) {\n    // TODO: For future versions - warn for missing form in dev mode\n    // if (__process.env.NODE_ENV !== 'production') { // or __DEV__\n    //     throw new Error('Field must be used inside of a <Form> component');\n    // }\n    return null;\n  } // TODO: remove this and pass down  getter to allow users optimize when to refresh the data?\n\n\n  var value = form.valueGetter(name); // TODO: For future versions as it's better to have render prop\n  // if (typeof children === 'function') {\n  //     return children({ ...field, children: undefined, ...others });\n  // }\n\n  return React.createElement(component, __assign({\n    // input\n    value: value,\n    // meta\n    validationMessage: form.errors[name],\n    touched: form.touched[name],\n    modified: form.modified[name],\n    visited: form.visited[name],\n    // Our `valid` implementation requires double submit to show html5 validation errors,\n    // however it's NOT recommended to show html5 validation errors at all as:\n    // - There is no standard way to change validation look and feel with CSS.\n    // - Look different in each browser / OS\n    // - You can have a page in one language but an error message displayed in another language (not localizable)\n    valid: !(Boolean(form.errors[name]) && form.touched[name]),\n    onUnshift: onUnshift,\n    onPush: onPush,\n    onInsert: onInsert,\n    onPop: onPop,\n    onRemove: onRemove,\n    onReplace: onReplace,\n    onMove: onMove,\n    children: children,\n    name: name\n  }, others));\n};\nFieldArray.displayName = 'KendoReactFieldArray';","map":{"version":3,"sources":["../../src/FieldArray.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport * as React from 'react';\nimport { FormContext } from './FormContext';\n/**\n * Represents the FieldArray component that is used inside the KendoReact Form component.\n * It provides methods via render props for common array manipulations.\n */\nexport var FieldArray = function (props) {\n    var name = props.name, component = props.component, validator = props.validator, type = props.type, children = props.children, others = __rest(props, [\"name\", \"component\", \"validator\", \"type\", \"children\"]);\n    var form = React.useContext(FormContext);\n    var formId = form ? form.id : '';\n    React.useEffect(function () {\n        if (!form) {\n            return;\n        }\n        var unregisterField = form.registerField(name, validator);\n        return unregisterField;\n    }, [name, formId, validator]);\n    var onUnshift = React.useCallback(function (event) { return form.onUnshift(name, event); }, [name, formId]);\n    var onPush = React.useCallback(function (event) { return form.onPush(name, event); }, [name, formId]);\n    var onInsert = React.useCallback(function (event) { return form.onInsert(name, event); }, [name, formId]);\n    var onPop = React.useCallback(function () { return form.onPop(name); }, [name, formId]);\n    var onRemove = React.useCallback(function (event) { return form.onRemove(name, event); }, [name, formId]);\n    var onReplace = React.useCallback(function (event) { return form.onReplace(name, event); }, [name, formId]);\n    var onMove = React.useCallback(function (event) { return form.onMove(name, event); }, [name, formId]);\n    if (!form) {\n        // TODO: For future versions - warn for missing form in dev mode\n        // if (__process.env.NODE_ENV !== 'production') { // or __DEV__\n        //     throw new Error('Field must be used inside of a <Form> component');\n        // }\n        return null;\n    }\n    // TODO: remove this and pass down  getter to allow users optimize when to refresh the data?\n    var value = form.valueGetter(name);\n    // TODO: For future versions as it's better to have render prop\n    // if (typeof children === 'function') {\n    //     return children({ ...field, children: undefined, ...others });\n    // }\n    return React.createElement(component, __assign({ \n        // input\n        value: value, \n        // meta\n        validationMessage: form.errors[name], touched: form.touched[name], modified: form.modified[name], visited: form.visited[name], \n        // Our `valid` implementation requires double submit to show html5 validation errors,\n        // however it's NOT recommended to show html5 validation errors at all as:\n        // - There is no standard way to change validation look and feel with CSS.\n        // - Look different in each browser / OS\n        // - You can have a page in one language but an error message displayed in another language (not localizable)\n        valid: !(Boolean(form.errors[name]) && form.touched[name]), onUnshift: onUnshift, onPush: onPush, onInsert: onInsert, onPop: onPop, onRemove: onRemove, onReplace: onReplace, onMove: onMove, children: children, name: name }, others));\n};\nFieldArray.displayName = 'KendoReactFieldArray';\n//# sourceMappingURL=FieldArray.js.map"]},"metadata":{},"sourceType":"module"}